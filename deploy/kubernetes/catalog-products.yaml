# Definicion del Deployment para el microservicio Catalog API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-api-deployment
  labels:
    app: catalog-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalog-api
  template:
    metadata:
      labels:
        app: catalog-api
    spec:
      containers:
      - name: catalog-api
        image: catalog-api:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
        env:
        - name: DB_USER
          value: "admin"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_DATABASE
          value: "cafeboreal"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /api/catalog/healthz
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /api/catalog/healthz
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "250m"
---
# Definicion del Service para que otros microservicios puedan acceder a Catalog API
apiVersion: v1
kind: Service
metadata:
  name: catalog-api-service
spec:
  selector:
    app: catalog-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
---
# Definicion del Ingress para exponer la API de catalogo a Nginx
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
spec:
  rules:
  - host: localhost
    http:
      paths:
      - path: /api/catalog
        pathType: Prefix
        backend:
          service:
            name: catalog-api-service
            port:
              number: 80
